#+PROPERTY: HEADER-ARGS+ :eval no-export

#+title: Readme

* ArgoCD Installation

** Manual
*** Put manifests into Kubernetes cluster

See https://argo-cd.readthedocs.io/en/stable/getting_started/

#+begin_src shell
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
#+end_src

*** Remove the TLS termination in argocd itself for ingresses:

#+name: argocd-config
#+begin_example
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cmd-params-cm
  labels:
    app.kubernetes.io/name: argocd-cmd-params-cm
    app.kubernetes.io/part-of: argocd
data:
  # Run server without TLS
  server.insecure: "true"
#+end_example

#+begin_src sh :stdin argocd-config
kubectl -n argocd apply -f -
kubectl -n argocd rollout restart deployment argocd-server
#+end_src

*** Optional: Prepare minikube and add ingress

On minikube there is no ingress installed. Add the addon:

#+begin_src shell
minikube addon enable ingress
#+end_src

#+RESULTS:

*** Optional: Add an traefik IngressRoute to access the web UI

#+name: argocd-ingress
#+begin_src sh :var IP="192.168.39.105"
echo "
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: argocd-server
  namespace: argocd
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: Host(`argocd.$IP.nip.io`)
      priority: 10
      services:
        - name: argocd-server
          port: 80
    - kind: Rule
      match: Host(`argocd.$IP.nip.io`) && Headers(`Content-Type`, `application/grpc`)
      priority: 11
      services:
        - name: argocd-server
          port: 80
          scheme: h2c
  tls:
    certResolver: default"  | kubectl apply -f -
#+end_src
#+RESULTS: argocd-ingress
: ingressroute.traefik.io/argocd-server configured

** Helm chart

#+begin_src sh :results verbatim
helm upgrade argocd argo/argo-cd --namespace argocd --create-namespace \
    --set server.ingress.enabled=true \
    --set server.ingress.hosts[0]="argocd.192.168.39.242.nip.io" \
    --set server.ingressGrpc.enabled=true \
    --set server.ingressGrpc.hosts[0]="argocd-rpc.192.168.39.242.nip.io" \
    --set server.extraArgs[0]="--insecure" \

#+end_src

#+RESULTS:
#+begin_example
Release "argocd" has been upgraded. Happy Helming!
NAME: argocd
LAST DEPLOYED: Sun Oct  8 16:58:06 2023
NAMESPACE: argocd
STATUS: deployed
REVISION: 6
TEST SUITE: None
NOTES:
DEPRECATED option server.extraArgs."--insecure" - Use configs.params.server.insecure

In order to access the server UI you have the following options:

1. kubectl port-forward service/argocd-server -n argocd 8080:443

    and then open the browser on http://localhost:8080 and accept the certificate

2. enable ingress in the values file `server.ingress.enabled` and either
      - Add the annotation for ssl passthrough: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-1-ssl-passthrough
      - Set the `configs.params."server.insecure"` in the values file and terminate SSL at your ingress: https://argo-cd.readthedocs.io/en/stable/operator-manual/ingress/#option-2-multiple-ingress-objects-and-hosts


After reaching the UI the first time you can login with username: admin and the random password generated during the installation. You can find the password by running:

kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

(You should delete the initial secret afterwards as suggested by the Getting Started Guide: https://argo-cd.readthedocs.io/en/stable/getting_started/#4-login-using-the-cli)
#+end_example

** Get the fist admin account and remove it

#+begin_src sh :results verbatim
argocd admin initial-password -n argocd
kubectl -n argocd delete secret argocd-initial-admin-secret
#+end_src

#+RESULTS:
: g6qIbPdkuT5G3fmL
:
:  This password must be only used for first time login. We strongly recommend you update the password using `argocd account update-password`.
: secret "argocd-initial-admin-secret" deleted

#+begin_src sh :eval no
argocd login argocd.192.168.39.242.nip.io
argocd account update-password
#+end_src
